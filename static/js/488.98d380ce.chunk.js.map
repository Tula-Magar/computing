{"version":3,"file":"static/js/488.98d380ce.chunk.js","mappings":"wLAEMA,GAAUC,EAAAA,EAAAA,OAAK,kBAAM,8BAAN,IACfC,GAAkBD,EAAAA,EAAAA,OAAK,kBAC3B,8BAD2B,IAGvBE,GAAkBF,EAAAA,EAAAA,OAAK,kBAAM,uDAAN,IACd,SAASG,KACtBC,EAAAA,EAAAA,GAAS,YAqDT,OACE,+BACE,iBAAKC,GAAG,YAAR,WACE,gBAAKA,GAAG,OAAR,UACE,SAACN,EAAD,OAGF,iBAAKM,GAAG,SAAR,WACE,4CACA,6YAQA,SAACH,EAAD,CAAiBI,MApEZ,sfAsEL,6CACA,8IAIA,SAACJ,EAAD,CAAiBI,MApDX,iQAsDN,oDACA,iLAKA,SAACJ,EAAD,CAAiBI,MA9CX,6YAiDR,gBAAKD,GAAG,QAAR,UACE,SAACJ,EAAD,UAKT,C","sources":["programming_languages/javascript_l/js_let.js"],"sourcesContent":["import React, { lazy } from \"react\";\nimport UseTitle from \"../../Title.js\";\nconst LeftNav = lazy(() => import(\"../../LeftNav/leftNav.js\"));\nconst RelatedCssLinks = lazy(() =>\n  import(\"./js_related_links/js_courses_links.js\")\n);\nconst HtmlCssJsEditor = lazy(() => import(\"../../Editor/HtmlCssJsEditor.js\"));\nexport default function javascript_lets() {\n  UseTitle(\"Html Let\");\n\n  const codeLet = `<!DOCTYPE html>\n<html>\n<body>\n    <div id=\"demo\"></div>\n    <script>\n        let  x = 10;\n        // Here x is 10\n\n        {  // opening curly brace starts a new block\n\n            let x = 2;\n            // Here x is 2 \n            // x is not visible outside the block\n            // x can be used here in the block\n\n        } // closing curly brace ends the block\n\n        // Here x is 2\n        document.getElementById(\"demo\").innerHTML = x;\n    </script>\n</body>\n</html>`;\n\n  const codeLet1 = `<!DOCTYPE html>\n<html>\n<body>\n    <div id=\"demo\"></div>\n    <script>\n\n        let x = 2;\n        let x = 3;  // error: x has already been declared\n\n    document.getElementById(\"demo\").innerHTML = x;\n        \n    </script>\n</body>\n</html>`;\n  const codeLet2 = `<!DOCTYPE html>\n<html>\n<body>\n    <div id=\"demo\"></div>\n    <script>\n        try {\n            x = 3.14;   // This will cause an error (x is used without declaration and before declaration)\n            let x;     // This will not cause an error\n        catch(err) {\n            document.getElementById(\"demo\").innerHTML = err.message;\n        }\n    </script>\n</body>\n</html>`;\n  return (\n    <>\n      <div id=\"container\">\n        <div id=\"left\">\n          <LeftNav />\n        </div>\n\n        <div id=\"middle\">\n          <h1>Javascript Let</h1>\n          <p>\n            The let statement declares a block scope local variable, optionally\n            initializing it to a value. It is important to note that the scope\n            of a variable declared with let is the block in which it is defined,\n            and any contained sub-blocks. This is in contrast to the var\n            keyword, which defines a variable globally, or locally to an entire\n            function regardless of block scope.\n          </p>\n          <HtmlCssJsEditor props={codeLet} />\n\n          <h1>Can't Redeclare</h1>\n          <p>\n            A variable declared with let cannot be re-declared in the same\n            scope. This results in a SyntaxError. For example:\n          </p>\n          <HtmlCssJsEditor props={codeLet1} />\n\n          <h1>Doesn't Allow Hoisting</h1>\n          <p>\n            Variables declared with let are not hoisted to the top of the block.\n            This means that the variable cannot be used before it is declared.\n            For example:\n          </p>\n          <HtmlCssJsEditor props={codeLet2} />\n        </div>\n\n        <div id=\"right\">\n          <RelatedCssLinks />\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":["LeftNav","lazy","RelatedCssLinks","HtmlCssJsEditor","javascript_lets","UseTitle","id","props"],"sourceRoot":""}