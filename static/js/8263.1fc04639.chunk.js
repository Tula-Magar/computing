"use strict";(self.webpackChunkcomputing=self.webpackChunkcomputing||[]).push([[8263],{8263:function(e,t,i){i.r(t),i.d(t,{default:function(){return d}});var n=i(2791),a=i(8329),r=i(184),s=(0,n.lazy)((function(){return i.e(6370).then(i.bind(i,6370))})),o=(0,n.lazy)((function(){return i.e(3779).then(i.bind(i,3779))})),l=(0,n.lazy)((function(){return Promise.all([i.e(7160),i.e(6884)]).then(i.bind(i,3397))}));function d(){(0,a.Z)("Html Intro");return(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)("div",{id:"container",children:[(0,r.jsx)("div",{id:"left",children:(0,r.jsx)(s,{})}),(0,r.jsxs)("div",{id:"middle",children:[(0,r.jsx)("h1",{children:"JavaScript Data Types"}),(0,r.jsx)("p",{children:"JavaScript has serveral data types: primitive data types and complex data type."}),(0,r.jsx)("h1",{children:"JavaScript Primitive Data Types"}),(0,r.jsx)("p",{children:"Primitive data types are immutable. They cannot be changed. They are passed by value. When you assign a primitive data type to a variable, you are assigning the value of the primitive data type to the variable. When you assign a variable to another variable, you are assigning the value of the variable to the other variable. When you pass a primitive data type to a function, you are passing the value of the primitive data type to the function. When you return a primitive data type from a function, you are returning the value of the primitive data type from the function."}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Number"}),(0,r.jsx)("li",{children:"bigint"}),(0,r.jsx)("li",{children:"String"}),(0,r.jsx)("li",{children:"Boolean"}),(0,r.jsx)("li",{children:"Null"}),(0,r.jsx)("li",{children:"Undefined"}),(0,r.jsx)("li",{children:"Symbol"})]}),(0,r.jsx)(l,{props:'<!DOCTYPE html>\n<html>\n<body>\n    <div id="primitive_data_types"></div>\n    <script>\n        let x = 10;\n        let y = x; // y is 10 because x is 10 \n        x = 20; // x is now 20 but y is still 10 because it is a copy of x \n        document.getElementById("primitive_data_types").innerHTML = "x = " + x + ", y = " + y;\n    <\/script>\n</body>\n</html>'}),(0,r.jsx)("p",{children:"Another example of primitive data types:"}),(0,r.jsx)(l,{props:"<!DOCTYPE html>\n<html>\n<body>\n    <div id=\"primitive_data_types\"></div>\n    <script>\n        let person = 'John';\n        person[0] = 'N'; // This will not work because strings are immutable \n        document.getElementById(\"primitive_data_types\").innerHTML = person;\n    <\/script>\n</body>\n</html>"}),(0,r.jsx)("h1",{children:"JavaScript Non-Primitive or Complex Data Types"}),(0,r.jsx)("p",{children:"Complex data types are mutable. They can be changed. They are passed by reference. When you assign a complex data type to a variable, you are assigning the reference of the complex data type to the variable. When you assign a variable to another variable, you are assigning the reference of the variable to the other variable. When you pass a complex data type to a function, you are passing the reference of the complex data type to the function. When you return a complex data type from a function, you are returning the reference of the complex data type from the function."}),(0,r.jsx)("ul",{children:(0,r.jsx)("li",{children:"Object"})}),(0,r.jsx)(l,{props:'<!DOCTYPE html>\n<html>\n<body>\n    <div id="non_primitive_data_types"></div>\n    <script>\n        let x = {firstName:"John", lastName:"Doe"};\n        let y = x;\n        x.firstName = "Jane";\n        document.getElementById("non_primitive_data_types").innerHTML = "x = " + x.firstName + ", y = " + y.firstName;\n    <\/script>\n</body>\n</html>'})]}),(0,r.jsx)("div",{id:"right",children:(0,r.jsx)(o,{})})]})})}}}]);
//# sourceMappingURL=8263.1fc04639.chunk.js.map