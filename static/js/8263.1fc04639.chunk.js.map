{"version":3,"file":"static/js/8263.1fc04639.chunk.js","mappings":"0LAEMA,GAAUC,EAAAA,EAAAA,OAAK,kBAAM,8BAAN,IACfC,GAAkBD,EAAAA,EAAAA,OAAK,kBAC3B,8BAD2B,IAGvBE,GAAkBF,EAAAA,EAAAA,OAAK,kBAAM,uDAAN,IACd,SAASG,KACtBC,EAAAA,EAAAA,GAAS,cAwCT,OACE,+BACE,iBAAKC,GAAG,YAAR,WACE,gBAAKA,GAAG,OAAR,UACE,SAACN,EAAD,OAGF,iBAAKM,GAAG,SAAR,WACE,mDACA,4GAIA,6DACA,4lBAWA,2BACE,oCACA,oCACA,oCACA,qCACA,kCACA,uCACA,uCAEF,SAACH,EAAD,CAAiBI,MAxEI,kXA0ErB,qEACA,SAACJ,EAAD,CAAiBI,MA9DK,8TA+DtB,4EACA,6lBAWA,yBACE,sCAEF,SAACJ,EAAD,CAAiBI,MAlEQ,uWAqE3B,gBAAKD,GAAG,QAAR,UACE,SAACJ,EAAD,UAKT,C","sources":["programming_languages/javascript_l/js_data_types.js"],"sourcesContent":["import React, { lazy } from \"react\";\nimport UseTitle from \"../../Title.js\";\nconst LeftNav = lazy(() => import(\"../../LeftNav/leftNav.js\"));\nconst RelatedCssLinks = lazy(() =>\n  import(\"./js_related_links/js_courses_links.js\")\n);\nconst HtmlCssJsEditor = lazy(() => import(\"../../Editor/HtmlCssJsEditor.js\"));\nexport default function javascript_data_types() {\n  UseTitle(\"Html Intro\");\n\n  const js_primitive_data_types = `<!DOCTYPE html>\n<html>\n<body>\n    <div id=\"primitive_data_types\"></div>\n    <script>\n        let x = 10;\n        let y = x; // y is 10 because x is 10 \n        x = 20; // x is now 20 but y is still 10 because it is a copy of x \n        document.getElementById(\"primitive_data_types\").innerHTML = \"x = \" + x + \", y = \" + y;\n    </script>\n</body>\n</html>`;\n\n  const js_primitive_data_types1 = `<!DOCTYPE html>\n<html>\n<body>\n    <div id=\"primitive_data_types\"></div>\n    <script>\n        let person = 'John';\n        person[0] = 'N'; // This will not work because strings are immutable \n        document.getElementById(\"primitive_data_types\").innerHTML = person;\n    </script>\n</body>\n</html>`;\n\n  const js_non_primitive_data_types = `<!DOCTYPE html>\n<html>\n<body>\n    <div id=\"non_primitive_data_types\"></div>\n    <script>\n        let x = {firstName:\"John\", lastName:\"Doe\"};\n        let y = x;\n        x.firstName = \"Jane\";\n        document.getElementById(\"non_primitive_data_types\").innerHTML = \"x = \" + x.firstName + \", y = \" + y.firstName;\n    </script>\n</body>\n</html>`;\n\n  return (\n    <>\n      <div id=\"container\">\n        <div id=\"left\">\n          <LeftNav />\n        </div>\n\n        <div id=\"middle\">\n          <h1>JavaScript Data Types</h1>\n          <p>\n            JavaScript has serveral data types: primitive data types and complex\n            data type.\n          </p>\n          <h1>JavaScript Primitive Data Types</h1>\n          <p>\n            Primitive data types are immutable. They cannot be changed. They are\n            passed by value. When you assign a primitive data type to a\n            variable, you are assigning the value of the primitive data type to\n            the variable. When you assign a variable to another variable, you\n            are assigning the value of the variable to the other variable. When\n            you pass a primitive data type to a function, you are passing the\n            value of the primitive data type to the function. When you return a\n            primitive data type from a function, you are returning the value of\n            the primitive data type from the function.\n          </p>\n          <ul>\n            <li>Number</li>\n            <li>bigint</li>\n            <li>String</li>\n            <li>Boolean</li>\n            <li>Null</li>\n            <li>Undefined</li>\n            <li>Symbol</li>\n          </ul>\n          <HtmlCssJsEditor props={js_primitive_data_types} />\n\n          <p>Another example of primitive data types:</p>\n          <HtmlCssJsEditor props={js_primitive_data_types1} />\n          <h1>JavaScript Non-Primitive or Complex Data Types</h1>\n          <p>\n            Complex data types are mutable. They can be changed. They are passed\n            by reference. When you assign a complex data type to a variable, you\n            are assigning the reference of the complex data type to the\n            variable. When you assign a variable to another variable, you are\n            assigning the reference of the variable to the other variable. When\n            you pass a complex data type to a function, you are passing the\n            reference of the complex data type to the function. When you return\n            a complex data type from a function, you are returning the reference\n            of the complex data type from the function.\n          </p>\n          <ul>\n            <li>Object</li>\n          </ul>\n          <HtmlCssJsEditor props={js_non_primitive_data_types} />\n        </div>\n\n        <div id=\"right\">\n          <RelatedCssLinks />\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":["LeftNav","lazy","RelatedCssLinks","HtmlCssJsEditor","javascript_data_types","UseTitle","id","props"],"sourceRoot":""}