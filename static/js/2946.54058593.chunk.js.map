{"version":3,"file":"static/js/2946.54058593.chunk.js","mappings":"mKAgFA,UA1EA,YAAqC,IAAVA,EAAS,EAATA,MACzB,GAAwBC,EAAAA,EAAAA,UAASD,GAAjC,eAAOE,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA4BC,EAAAA,EAAAA,iBAAnBC,GAAT,eACA,GAA4BN,EAAAA,EAAAA,UAAS,OAArC,eAAOO,EAAP,KAAeC,EAAf,KACMC,GAAMC,EAAAA,EAAAA,UAkBZ,OAhBAC,EAAAA,EAAAA,YAAU,WACRT,EAAQH,EACT,GAAE,CAACA,KAEJY,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAUH,EAAII,QACpBL,EAAUI,EAAQE,cAAcC,SAASC,KAAKC,aAAe,MAC7DC,QAAQC,IAAIP,EAAQE,cAAcC,SAASC,KAAKC,cAChDX,GAAgB,WACdF,EAAUH,EACX,GACF,GAAE,CAACA,EAAMM,KAMR,+BACE,iBAAKa,UAAU,OAAf,WACE,0BAeE,gBAAK,kBAAgB,QAArB,UACE,SAAC,IAAD,CACEC,MAAOpB,EACPqB,SAAS,OACTC,YAAY,mCACZC,SAAU,SAACC,GAAD,OAASvB,EAAQuB,EAAIC,OAAOL,MAA5B,EACVM,QAAS,GACTP,UAAU,aACVQ,YAAY,SASlB,gBAAKR,UAAU,eAAf,UACE,mBACEX,IAAKA,EACLN,OAAQA,EACR0B,MAAM,SAENC,YAAY,IACZvB,OAAQA,EACRa,UAAU,6BAMrB,C,yICtEc,SAASW,KACtBC,EAAAA,EAAAA,GAAS,sBAgCT,OACE,+BACE,iBAAKC,GAAG,YAAR,WACE,gBAAKA,GAAG,OAAR,UACE,gBAAIb,UAAU,OAAd,WACE,UAAC,KAAD,CAAMA,UAAU,OAAOc,GAAG,IAA1B,UACG,IADH,WAIA,UAAC,KAAD,CAAMd,UAAU,OAAOc,GAAG,IAA1B,UACG,IADH,WAIA,UAAC,KAAD,CAAMd,UAAU,OAAOc,GAAG,IAA1B,UACG,IADH,gBAMJ,iBAAKD,GAAG,SAAR,WACE,gDACA,wIAIA,2BACE,2BACE,0CADF,gIAKA,2BACE,4CADF,qLAMF,2CACA,SAAC,UAAD,CAAiBlC,MApEN,gHAqEX,6CACA,SAAC,UAAD,CAAiBA,MA9DJ,0HAgEb,oDACA,2GAIA,SAAC,UAAD,CAAiBA,MA7DD,oVA8DhB,2BACE,gCACA,uCACW,iCADX,2EAIA,gCACA,uCACW,iCADX,oFAIA,gCACA,uCACW,iCADX,wEAMF,0BACE,gCADF,qFAMF,gBAAKkC,GAAG,QAAR,UACE,SAAC,IAAD,UAKT,C","sources":["Editor/HtmlCssJsEditor.js","programming_languages/html_l/Html_list.js"],"sourcesContent":["import React, { useState, useEffect, useTransition, useRef } from \"react\";\n// import CodeMirror from \"@uiw/react-codemirror\";\n// import { markdown, markdownLanguage } from \"@codemirror/lang-markdown\";\n// import { languages } from \"@codemirror/language-data\";\nimport CodeEditor from \"@uiw/react-textarea-code-editor\";\n\nfunction HtmlCssJsEditor({ props }) {\n  const [html, setHtml] = useState(props);\n  const [srcDoc, setSrcDoc] = useState(\"\");\n  const [, startTransition] = useTransition();\n  const [height, setHeight] = useState(\"0px\");\n  const ref = useRef();\n\n  useEffect(() => {\n    setHtml(props);\n  }, [props]);\n\n  useEffect(() => {\n    const element = ref.current;\n    setHeight(element.contentWindow.document.body.scrollHeight + \"px\");\n    console.log(element.contentWindow.document.body.scrollHeight);\n    startTransition(() => {\n      setSrcDoc(html);\n    });\n  }, [html, height]);\n  // const onLoad = () => {\n  //   setHeight(ref.contentWindow.document.body.scrollHeight + \"px\");\n  // };\n\n  return (\n    <>\n      <div className=\"pane\">\n        <div>\n          {/* <CodeMirror\n            value={html}\n            spellCheck=\"false\"\n            aria-label=\"HTML Code Editor\"\n            padding={15}\n            options={{\n              spellCheck: \"false\",\n              lineWrapping: true,\n            }}\n            extensions={[\n              markdown({ base: markdownLanguage, codeLanguages: languages }),\n            ]}\n            onChange={(value) => setHtml(value)}\n          /> */}\n          <div data-color-mode=\"light\">\n            <CodeEditor\n              value={html}\n              language=\"html\"\n              placeholder=\"Please enter html, css, js code.\"\n              onChange={(evn) => setHtml(evn.target.value)}\n              padding={15}\n              className=\"EditorMode\"\n              spellCheck={false}\n              // style={{\n              //   fontFamily:\n              //     \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\",\n              //   fontSize: 14,\n              // }}\n            />\n          </div>\n        </div>\n        <div className=\"EditorOutput\">\n          <iframe\n            ref={ref}\n            srcDoc={srcDoc}\n            title=\"output\"\n            // sandbox=\"allow-scripts\"\n            frameBorder=\"0\"\n            height={height}\n            className=\"text-editor-output\"\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default HtmlCssJsEditor;\n","import React from \"react\";\nimport \"./html_style.css\";\nimport UseTitle from \"../../Title.js\";\nimport RelatedLinks from \"./html_links/related_links\";\n// import Highlight, { defaultProps } from \"prism-react-renderer\";\n// import Element from \"../../img/html_images/html_tag.PNG\";\nimport { Link } from \"react-router-dom\";\nimport HtmlCssJsEditor from \"../../Editor/HtmlCssJsEditor.js\";\nexport default function Html_list() {\n  UseTitle(\"What is HTML List?\");\n\n  const HtmlOrderList = `<ol>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n  <li>Item 5</li>\n</ol>`;\n\n  const HtmlUnorderList = `<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n    <li>Item 4</li>\n    <li>Item 5</li>\n</ul>`;\n\n  const HtmlDefinitionList = `<dl>\n    <dt>Definition List</dt>\n    <dd>A list of terms and their definitions.</dd>\n    <dt>Item 1</dt>\n    <dd>Definition 1</dd>\n    <dt>Item 2</dt>\n    <dd>Definition 2</dd>\n    <dt>Item 3</dt>\n    <dd>Definition 3</dd>\n    <dt>Item 4</dt>\n    <dd>Definition 4</dd>\n    <dt>Item 5</dt>\n    <dd>Definition 5</dd>\n</dl>`;\n  return (\n    <>\n      <div id=\"container\">\n        <div id=\"left\">\n          <li className=\"list\">\n            <Link className=\"list\" to=\"/\">\n              {\" \"}\n              Home\n            </Link>\n            <Link className=\"list\" to=\"/\">\n              {\" \"}\n              Home\n            </Link>\n            <Link className=\"list\" to=\"/\">\n              {\" \"}\n              Home\n            </Link>\n          </li>\n        </div>\n        <div id=\"middle\">\n          <h1>What is HTML List?</h1>\n          <p>\n            Html list is used to display the list of items. There are two types\n            of list in HTML: ordered and unordered.\n          </p>\n          <ul>\n            <li>\n              <b> Ordered list:</b> is used to display the list of items in\n              order. List items are numbered from 1 to n. n is the total number\n              of list items.\n            </li>\n            <li>\n              <b> Unordered list:</b> is used to display the list of items in\n              unordered. List items are not numbered. List items are displayed\n              in random order and by default, they are displayed in a bulleted.\n            </li>\n          </ul>\n          <h1>Ordered list:</h1>\n          <HtmlCssJsEditor props={HtmlOrderList} />\n          <h1>Unordered list:</h1>\n          <HtmlCssJsEditor props={HtmlUnorderList} />\n\n          <h1>HTMl Description List:</h1>\n          <p>\n            HTML description list is used to display the list of items with a\n            description.\n          </p>\n          <HtmlCssJsEditor props={HtmlDefinitionList} />\n          <dl>\n            <dt>dl</dt>\n            <dd>\n              The HTML <code>dl</code> element is used to represent a list of\n              terms and their definitions.\n            </dd>\n            <dt>dd</dt>\n            <dd>\n              The HTML <code>dd</code> element is used to represent the\n              definition of a term in a description list.\n            </dd>\n            <dt>dt</dt>\n            <dd>\n              The HTML <code>dt</code> element is used to represent the term of\n              the definition list.\n            </dd>\n          </dl>\n\n          <p>\n            <b>Note</b>: you can use css to style the list items as you want to\n            make it look nice.\n          </p>\n        </div>\n\n        <div id=\"right\">\n          <RelatedLinks />\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":["props","useState","html","setHtml","srcDoc","setSrcDoc","useTransition","startTransition","height","setHeight","ref","useRef","useEffect","element","current","contentWindow","document","body","scrollHeight","console","log","className","value","language","placeholder","onChange","evn","target","padding","spellCheck","title","frameBorder","Html_list","UseTitle","id","to"],"sourceRoot":""}