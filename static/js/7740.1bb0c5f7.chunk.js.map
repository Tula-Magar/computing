{"version":3,"file":"static/js/7740.1bb0c5f7.chunk.js","mappings":"0LAEMA,GAAUC,EAAAA,EAAAA,OAAK,kBAAM,8BAAN,IACfC,GAAkBD,EAAAA,EAAAA,OAAK,kBAC3B,8BAD2B,IAGvBE,GAAkBF,EAAAA,EAAAA,OAAK,kBAAM,uDAAN,IACd,SAASG,KACtBC,EAAAA,EAAAA,GAAS,aAkBT,OACE,+BACE,iBAAKC,GAAG,YAAR,WACE,gBAAKA,GAAG,OAAR,UACE,SAACN,EAAD,OAGF,iBAAKM,GAAG,SAAR,WACE,+CACA,2NAKA,SAACH,EAAD,CAAiBI,MA9BN,6oBA+BX,oDACA,2BACE,4FAGA,8DACA,qGAIA,sEACA,6EACA,6EAEF,iDACA,mBAAOC,UAAU,wBAAjB,WACE,2BACE,qCACA,4CAEF,2BACE,mCACA,8DAEF,2BACE,kCACA,2EAEF,2BACE,mCACA,yEAEF,2BACE,mCACA,iDAEF,2BACE,mCACA,oDAEF,2BACE,sCACA,gFAEF,2BACE,sCACA,qDAEF,2BACE,qCACA,mFAEF,2BACE,oCACA,kEAEF,2BACE,gCACA,uDAEF,2BACE,kCACA,yEAEF,2BACE,oCACA,iDAEF,2BACE,qCACA,gDAEF,2BACE,qCACA,2EAEF,2BACE,iCACA,kDAEF,2BACE,sCACA,oDAEF,2BACE,gCACA,uDAEF,2BACE,oCACA,iDAEF,2BACE,gCACA,8EAEF,2BACE,wCACA,mFAEF,2BACE,iCACA,+DAEF,2BACE,oCACA,iDAEF,2BACE,mCACA,2DAEF,2BACE,oCACA,0DAEF,2BACE,kCACA,6DAEF,2BACE,mCACA,oDAEF,2BACE,iCACA,uDAEF,2BACE,oCACA,+DAEF,2BACE,iCACA,oDAEF,2BACE,kCACA,uFAEF,2BACE,mCACA,oDAEF,2BACE,kCACA,wDAEF,2BACE,mCACA,wEAEF,2BACE,iCACA,sEAEF,2BACE,oCACA,iFAEF,2BACE,qCACA,sDAGF,2BACE,qCACA,oEAEF,2BACE,qCACA,kEAEF,2BACE,oCACA,0DAEF,2BACE,kCACA,wDAEF,2BACE,mCACA,0EAEF,2BACE,mCACA,0EAEF,2BACE,0CACA,0DAEF,2BACE,yCACA,wDAEF,2BACE,uCACA,qDAEF,2BACE,uCACA,wEAEF,2BACE,yCACA,0EAEF,2BACE,sCACA,uEAEF,2BACE,uCACA,6DAEF,2BACE,sCACA,yDAEF,2BACE,uCACA,kDAEF,2BACE,wCACA,6DAEF,2BACE,kCACA,sEAEF,2BACE,mCACA,kEAEF,2BACE,uCACA,8DAEF,2BACE,2CACA,yDAEF,2BACE,uCACA,kDAEF,2BACE,mCACA,+DAEF,2BACE,sCACA,6DAEF,2BACE,sCACA,6DAEF,2BACE,sCACA,6DAEF,2BACE,oCACA,wDAEF,2BACE,oCACA,mDAEF,2BACE,sCACA,6DAEF,2BACE,yCACA,uDAEF,2BACE,qCACA,iFAEF,2BACE,oCACA,2DAEF,2BACE,yCACA,iEAEF,2BACE,oCAEA,yFAEF,2BACE,kCACA,gEAEF,2BACE,qCACA,gEAEF,2BACE,wCACA,gEAEF,2BACE,qCACA,mEAKN,gBAAKF,GAAG,QAAR,UACE,SAACJ,EAAD,UAKT,C","sources":["programming_languages/javascript_l/js_syntax.js"],"sourcesContent":["import React, { lazy } from \"react\";\nimport UseTitle from \"../../Title.js\";\nconst LeftNav = lazy(() => import(\"../../LeftNav/leftNav.js\"));\nconst RelatedCssLinks = lazy(() =>\n  import(\"./js_related_links/js_courses_links.js\")\n);\nconst HtmlCssJsEditor = lazy(() => import(\"../../Editor/HtmlCssJsEditor.js\"));\nexport default function javascript_syntax() {\n  UseTitle(\"Js Syntax\");\n\n  const CaseSensitive = `\n    <!DOCTYPE html>\n    <html>\n        <body>\n            <h1>JavaScript is case sensitive</h1>\n            <p id=\"demo\"></p>\n            <script>\n                const x = 5;\n                const X = 6;\n                // const x = 7; // SyntaxError: Identifier 'x' has already been declared\n                // const X = 8; // SyntaxError: Identifier 'X' has already been declared\n                // const for = 9; // SyntaxError: Unexpected token 'for', for is a reserved word or javascript keyword\n                document.getElementById(\"demo\").innerHTML = x + \" \" + X;\n            </script>\n        </body>\n    </html>`;\n  return (\n    <>\n      <div id=\"container\">\n        <div id=\"left\">\n          <LeftNav />\n        </div>\n\n        <div id=\"middle\">\n          <h1>Javascript Syntax</h1>\n          <p>\n            Javascript is a case-sensitive language. It means that the\n            Javascript language keywords, variables, functions, and any other\n            identifiers must have the same case to be recognized as the same.\n          </p>\n          <HtmlCssJsEditor props={CaseSensitive} />\n          <h1>Javascript Identifiers</h1>\n          <ul>\n            <li>\n              Identifiers can be names of variables, functions, and objects.\n            </li>\n            <li> Identifiers can be any length. </li>\n            <li>\n              Identifiers can contain letters, digits, underscores, and dollar\n              signs.\n            </li>\n            <li> Identifiers cannot start with a digit. </li>\n            <li> Identifiers cannot contain spaces or hyphens. </li>\n            <li> Identifiers cannot be Javascript keywords. </li>\n          </ul>\n          <h1>Javascript Keywords</h1>\n          <table className=\"html_attributes_table\">\n            <tr>\n              <th>Keyword</th>\n              <th>Description</th>\n            </tr>\n            <tr>\n              <td>break</td>\n              <td>Terminates a switch or a loop</td>\n            </tr>\n            <tr>\n              <td>case</td>\n              <td>Starts a case clause in a switch statement</td>\n            </tr>\n            <tr>\n              <td>catch</td>\n              <td>Starts a catch clause in a try statement</td>\n            </tr>\n            <tr>\n              <td>class</td>\n              <td>Declares a class</td>\n            </tr>\n            <tr>\n              <td>const</td>\n              <td>Declares a constant</td>\n            </tr>\n            <tr>\n              <td>continue</td>\n              <td>Terminates a loop and starts the next iteration</td>\n            </tr>\n            <tr>\n              <td>debugger</td>\n              <td>Invokes the debugger</td>\n            </tr>\n            <tr>\n              <td>default</td>\n              <td>Specifies the default clause in a switch statement</td>\n            </tr>\n            <tr>\n              <td>delete</td>\n              <td>Deletes a property from an object</td>\n            </tr>\n            <tr>\n              <td>do</td>\n              <td>Starts a do-while loop</td>\n            </tr>\n            <tr>\n              <td>else</td>\n              <td>Starts an else clause in an if statement</td>\n            </tr>\n            <tr>\n              <td>export</td>\n              <td>Exports a module</td>\n            </tr>\n            <tr>\n              <td>extends</td>\n              <td>Extends a class</td>\n            </tr>\n            <tr>\n              <td>finally</td>\n              <td>Starts a finally clause in a try statement</td>\n            </tr>\n            <tr>\n              <td>for</td>\n              <td>Starts a for loop</td>\n            </tr>\n            <tr>\n              <td>function</td>\n              <td>Declares a function</td>\n            </tr>\n            <tr>\n              <td>if</td>\n              <td>Starts an if statement</td>\n            </tr>\n            <tr>\n              <td>import</td>\n              <td>Imports a module</td>\n            </tr>\n            <tr>\n              <td>in</td>\n              <td>Checks whether a property exists in an object</td>\n            </tr>\n            <tr>\n              <td>instanceof</td>\n              <td>Checks whether an object is an instance of a class</td>\n            </tr>\n            <tr>\n              <td>new</td>\n              <td>Creates an instance of a class</td>\n            </tr>\n            <tr>\n              <td>return</td>\n              <td>Exits a function</td>\n            </tr>\n            <tr>\n              <td>super</td>\n              <td>Refers to the parent class</td>\n            </tr>\n            <tr>\n              <td>switch</td>\n              <td>Starts a switch statement</td>\n            </tr>\n            <tr>\n              <td>this</td>\n              <td>Refers to the current object</td>\n            </tr>\n            <tr>\n              <td>throw</td>\n              <td>Throws an exception</td>\n            </tr>\n            <tr>\n              <td>try</td>\n              <td>Starts a try statement</td>\n            </tr>\n            <tr>\n              <td>typeof</td>\n              <td>Returns the type of a variable</td>\n            </tr>\n            <tr>\n              <td>var</td>\n              <td>Declares a variable</td>\n            </tr>\n            <tr>\n              <td>void</td>\n              <td>Specifies an expression that should not return a value</td>\n            </tr>\n            <tr>\n              <td>while</td>\n              <td>Starts a while loop</td>\n            </tr>\n            <tr>\n              <td>with</td>\n              <td>Starts a with statement</td>\n            </tr>\n            <tr>\n              <td>yield</td>\n              <td>Pauses and resumes a generator function</td>\n            </tr>\n            <tr>\n              <td>let</td>\n              <td>Declares a block scope local variable</td>\n            </tr>\n            <tr>\n              <td>static</td>\n              <td>Declares a static method or property for a class</td>\n            </tr>\n            <tr>\n              <td> while </td>\n              <td> Starts a while loop </td>\n            </tr>\n\n            <tr>\n              <td> async </td>\n              <td> Declares an asynchronous function </td>\n            </tr>\n            <tr>\n              <td> await </td>\n              <td> Pauses an asynchronous function </td>\n            </tr>\n            <tr>\n              <td> enum </td>\n              <td> Declares an enumeration </td>\n            </tr>\n            <tr>\n              <td> of </td>\n              <td> Used in a for-of loop </td>\n            </tr>\n            <tr>\n              <td> get </td>\n              <td> Declares a getter method for a property </td>\n            </tr>\n            <tr>\n              <td> set </td>\n              <td> Declares a setter method for a property </td>\n            </tr>\n            <tr>\n              <td> implements </td>\n              <td> Implements an interface </td>\n            </tr>\n            <tr>\n              <td> interface </td>\n              <td> Declares an interface </td>\n            </tr>\n            <tr>\n              <td> package </td>\n              <td> Declares a package </td>\n            </tr>\n            <tr>\n              <td> private </td>\n              <td> Declares a private property or method </td>\n            </tr>\n            <tr>\n              <td> protected </td>\n              <td> Declares a protected property or method </td>\n            </tr>\n            <tr>\n              <td> public </td>\n              <td> Declares a public property or method </td>\n            </tr>\n            <tr>\n              <td> require </td>\n              <td> Declares a CommonJS module </td>\n            </tr>\n            <tr>\n              <td> module </td>\n              <td> Declares an ES6 module </td>\n            </tr>\n            <tr>\n              <td> declare </td>\n              <td> Declares a type </td>\n            </tr>\n            <tr>\n              <td> abstract </td>\n              <td> Declares an abstract class </td>\n            </tr>\n            <tr>\n              <td> as </td>\n              <td> Casts a variable to a specific type </td>\n            </tr>\n            <tr>\n              <td> any </td>\n              <td> Declares a variable of any type </td>\n            </tr>\n            <tr>\n              <td> boolean </td>\n              <td> Declares a boolean variable </td>\n            </tr>\n            <tr>\n              <td> constructor </td>\n              <td> Declares a constructor </td>\n            </tr>\n            <tr>\n              <td> declare </td>\n              <td> Declares a type </td>\n            </tr>\n            <tr>\n              <td> int </td>\n              <td> Declares an integer variable </td>\n            </tr>\n            <tr>\n              <td> number </td>\n              <td> Declares a number variable </td>\n            </tr>\n            <tr>\n              <td> string </td>\n              <td> Declares a string variable </td>\n            </tr>\n            <tr>\n              <td> symbol </td>\n              <td> Declares a symbol variable </td>\n            </tr>\n            <tr>\n              <td> type </td>\n              <td> Declares a type alias </td>\n            </tr>\n            <tr>\n              <td> from </td>\n              <td> Imports a module </td>\n            </tr>\n            <tr>\n              <td> global </td>\n              <td> Declares a global variable </td>\n            </tr>\n            <tr>\n              <td> namespace </td>\n              <td> Declares a namespace </td>\n            </tr>\n            <tr>\n              <td> never </td>\n              <td> Declares a variable that never returns a value </td>\n            </tr>\n            <tr>\n              <td> null </td>\n              <td> Declares a null variable </td>\n            </tr>\n            <tr>\n              <td> undefined </td>\n              <td> Declares an undefined variable </td>\n            </tr>\n            <tr>\n              <td> void </td>\n\n              <td> Specifies an expression that should not return a value </td>\n            </tr>\n            <tr>\n              <td> is </td>\n              <td> Checks the type of a variable </td>\n            </tr>\n            <tr>\n              <td> keyof </td>\n              <td> Returns the key of a property </td>\n            </tr>\n            <tr>\n              <td> readonly </td>\n              <td> Declares a read-only property </td>\n            </tr>\n            <tr>\n              <td> super </td>\n              <td> Refers to the parent class </td>\n            </tr>\n          </table>\n        </div>\n\n        <div id=\"right\">\n          <RelatedCssLinks />\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":["LeftNav","lazy","RelatedCssLinks","HtmlCssJsEditor","javascript_syntax","UseTitle","id","props","className"],"sourceRoot":""}