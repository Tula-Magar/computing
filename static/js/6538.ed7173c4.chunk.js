"use strict";(self.webpackChunkcomputing=self.webpackChunkcomputing||[]).push([[6538],{6538:function(e,n,a){a.r(n),a.d(n,{default:function(){return l}});var i=a(8381),t=a(9342),s=a(9343),o=(0,i.lazy)((function(){return a.e(4115).then(a.bind(a,4115))})),r=(0,i.lazy)((function(){return a.e(7657).then(a.bind(a,7657))})),c=(0,i.lazy)((function(){return Promise.all([a.e(4553),a.e(4384)]).then(a.bind(a,9471))}));function l(){(0,t.Z)("Js Variables");return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{id:"container",children:[(0,s.jsx)("div",{id:"left",children:(0,s.jsx)(o,{})}),(0,s.jsxs)("div",{id:"middle",children:[(0,s.jsx)("h1",{children:"JavaScript Variables"}),(0,s.jsx)("p",{children:"JavaScript variables are containers for storing data. You must declare a variable before you can use it for any purpose."}),(0,s.jsx)("p",{children:"JavaScript is a weak typed language. It does not have a type system meaning that you don't have to specify the type of a variable. JavaScript will automatically assign the type of a variable based on the value that it is assigned. Unlike other languages like Java, C, C++, etc, you have to specify the type of a variable such as int, string, float, and etc."}),(0,s.jsx)("p",{children:"Following below is an examples of a variable in JavaScript."}),(0,s.jsx)("h1",{children:" Var variable "}),(0,s.jsx)("p",{children:"The var keyword is used to declare a variable. The var keyword is a global variable. It can be used anywhere in the program. The var is a old variable keyword in JavaScript and still in use."}),(0,s.jsx)(c,{props:'function sayHi() { \n    var name = "John is " \n    var age = "30"\n}\nconsole.log(name + age) // can be accessed outside the function'}),(0,s.jsx)("h1",{children:"Let variable"}),(0,s.jsx)("p",{children:"Since 2015, the let keyword was introduced in JavaScript. The let keyword is a local variable. It can be used only within the block it was defined. You must use the let variable when there is a chance that the variable will be reassigned or changed."}),(0,s.jsx)(c,{props:'function sayHi() {\n    let name = "John"\n    console.log(name) // can be accessed within the function or block \n\n    name = "5" // can be changed or reassigned\n    console.log(name) \n\n}\nconsole.log(name) // cann\'t be accessed outside the function. You will get an error'}),(0,s.jsx)("h1",{children:"Const variable"}),(0,s.jsx)("p",{children:"Since 2015, the const keyword was introduced in JavaScript. The const keyword is a constant variable. It can be used only within the block it was defined. It can't be reassigned and changed. The const variable is very strict but easy to understand."}),(0,s.jsx)(c,{props:'function sayHi() {\n    const name = "John"\n    console.log(name) // can be accessed within the function or block\n    \n    name = "5" // cann\'t be changed or reassigned, you will get an error\n\n}\nconsole.log(name) // cann\'t be accessed outside the function. You will get an error'}),(0,s.jsx)("h1",{children:"Using Nothing"}),(0,s.jsx)("p",{children:" I am using nothing type variable in the function parameters."}),(0,s.jsx)(c,{props:'function sayHi( name, age, negative ) {\n    console.log(name , age - negative) // can be accessed within the function or block\n}\nsayHi("John", "30", 2 ); // can be accessed outside the function'}),(0,s.jsx)("p",{children:"The reason I am using nothing type variable is because I am not sure if the variable will be reassigned or changed. I didn't give the variable a type and JavaScript will assign the type of the variable based on the value that it is assigned automatically."})]}),(0,s.jsx)("div",{id:"right",children:(0,s.jsx)(r,{})})]})})}}}]);
//# sourceMappingURL=6538.ed7173c4.chunk.js.map