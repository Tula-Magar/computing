"use strict";(self.webpackChunkcomputing=self.webpackChunkcomputing||[]).push([[488],{488:function(e,n,t){t.r(n),t.d(n,{default:function(){return a}});var i=t(2791),r=t(8329),l=t(184),o=(0,i.lazy)((function(){return t.e(6370).then(t.bind(t,6370))})),d=(0,i.lazy)((function(){return t.e(3779).then(t.bind(t,3779))})),s=(0,i.lazy)((function(){return Promise.all([t.e(7160),t.e(6884)]).then(t.bind(t,3397))}));function a(){(0,r.Z)("Html Let");return(0,l.jsx)(l.Fragment,{children:(0,l.jsxs)("div",{id:"container",children:[(0,l.jsx)("div",{id:"left",children:(0,l.jsx)(o,{})}),(0,l.jsxs)("div",{id:"middle",children:[(0,l.jsx)("h1",{children:"Javascript Let"}),(0,l.jsx)("p",{children:"The let statement declares a block scope local variable, optionally initializing it to a value. It is important to note that the scope of a variable declared with let is the block in which it is defined, and any contained sub-blocks. This is in contrast to the var keyword, which defines a variable globally, or locally to an entire function regardless of block scope."}),(0,l.jsx)(s,{props:'<!DOCTYPE html>\n<html>\n<body>\n    <div id="demo"></div>\n    <script>\n        let  x = 10;\n        // Here x is 10\n\n        {  // opening curly brace starts a new block\n\n            let x = 2;\n            // Here x is 2 \n            // x is not visible outside the block\n            // x can be used here in the block\n\n        } // closing curly brace ends the block\n\n        // Here x is 2\n        document.getElementById("demo").innerHTML = x;\n    <\/script>\n</body>\n</html>'}),(0,l.jsx)("h1",{children:"Can't Redeclare"}),(0,l.jsx)("p",{children:"A variable declared with let cannot be re-declared in the same scope. This results in a SyntaxError. For example:"}),(0,l.jsx)(s,{props:'<!DOCTYPE html>\n<html>\n<body>\n    <div id="demo"></div>\n    <script>\n\n        let x = 2;\n        let x = 3;  // error: x has already been declared\n\n    document.getElementById("demo").innerHTML = x;\n        \n    <\/script>\n</body>\n</html>'}),(0,l.jsx)("h1",{children:"Doesn't Allow Hoisting"}),(0,l.jsx)("p",{children:"Variables declared with let are not hoisted to the top of the block. This means that the variable cannot be used before it is declared. For example:"}),(0,l.jsx)(s,{props:'<!DOCTYPE html>\n<html>\n<body>\n    <div id="demo"></div>\n    <script>\n        try {\n            x = 3.14;   // This will cause an error (x is used without declaration and before declaration)\n            let x;     // This will not cause an error\n        catch(err) {\n            document.getElementById("demo").innerHTML = err.message;\n        }\n    <\/script>\n</body>\n</html>'})]}),(0,l.jsx)("div",{id:"right",children:(0,l.jsx)(d,{})})]})})}}}]);
//# sourceMappingURL=488.98d380ce.chunk.js.map