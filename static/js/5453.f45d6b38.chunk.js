"use strict";(self.webpackChunkcomputing=self.webpackChunkcomputing||[]).push([[5453],{5453:function(n,e,r){r.r(e),r.d(e,{default:function(){return c}});var t=r(8381),i=r(9342),a=r(9343),o=(0,t.lazy)((function(){return r.e(4115).then(r.bind(r,4115))})),s=(0,t.lazy)((function(){return r.e(7657).then(r.bind(r,7657))})),d=(0,t.lazy)((function(){return Promise.all([r.e(4553),r.e(4384)]).then(r.bind(r,9471))}));function c(){(0,i.Z)("Js Arrow Function");return(0,a.jsx)(a.Fragment,{children:(0,a.jsxs)("div",{id:"container",children:[(0,a.jsx)("div",{id:"left",children:(0,a.jsx)(o,{})}),(0,a.jsxs)("div",{id:"middle",children:[(0,a.jsx)("h1",{children:"Javascript Arrow Function"}),(0,a.jsx)("p",{children:"Arrow functions are a new feature in ES6. They are a concise way to define functions. They are a little bit different from regular functions in that they do not have a function keyword."}),(0,a.jsx)("h1",{children:"Trdational vs Arrow Function"}),(0,a.jsxs)("p",{children:[" ","Arrow function needs a variable to be defined in order to use it. See below for an example and observe the difference."]}),(0,a.jsx)(d,{props:" //Traditional Function\n  function add() {\n     return 5 + 5;\n}\n    //Arrow Function\n  const add = () => {\n     return 5 + 5;\n}"}),(0,a.jsx)("h1",{children:"Parameters in Arrow Function"}),(0,a.jsx)("p",{children:"Paramenters is a list of variables that are used to define the function. The parameters are separated by commas. The parameters is useful when you want to reuse the data. For example"}),(0,a.jsx)(d,{props:"const add = (a, b) => {\n    return a + b;\n}\nadd(5, 5);"})]}),(0,a.jsx)("div",{id:"right",children:(0,a.jsx)(s,{})})]})})}}}]);
//# sourceMappingURL=5453.f45d6b38.chunk.js.map