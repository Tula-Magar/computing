"use strict";(self.webpackChunkcomputing=self.webpackChunkcomputing||[]).push([[6781],{6781:function(e,n,t){t.r(n),t.d(n,{default:function(){return u}});var a=t(8381),r=t(9342),i=t(9343),o=(0,a.lazy)((function(){return t.e(4115).then(t.bind(t,4115))})),c=(0,a.lazy)((function(){return t.e(7657).then(t.bind(t,7657))})),s=(0,a.lazy)((function(){return Promise.all([t.e(4553),t.e(4384)]).then(t.bind(t,9471))}));function u(){(0,r.Z)("Js Functions");return(0,i.jsx)(i.Fragment,{children:(0,i.jsxs)("div",{id:"container",children:[(0,i.jsx)("div",{id:"left",children:(0,i.jsx)(o,{})}),(0,i.jsxs)("div",{id:"middle",children:[(0,i.jsx)("h1",{children:"Javascript Functions"}),(0,i.jsx)("p",{children:"Function is a block of code that can be executed. Functions can be used to perform a task or to create a reusable block of code."}),(0,i.jsx)("p",{children:"Function is a Javascript keyword that is used to create a function."}),(0,i.jsx)("h1",{children:"How to create a function"}),(0,i.jsx)("p",{children:"You must start a function with the word function followed by a name for the function. For example:"}),(0,i.jsx)(s,{props:'function CreateFunction() {\n    let value = "Hello from a function";\n    console.log(value);\n    }\n    CreateFunction();'}),(0,i.jsx)("p",{children:"The function can have parameters. Parameters are variables that are used to pass values into a function. Parameters are separated by commas. Parameters are optional. If you do not specify a parameter, the function will receive undefined as a value."}),(0,i.jsx)("p",{children:"The function can return a value. The return statement is used to return a value from a function."})]}),(0,i.jsx)("div",{id:"right",children:(0,i.jsx)(c,{})})]})})}}}]);
//# sourceMappingURL=6781.96538052.chunk.js.map