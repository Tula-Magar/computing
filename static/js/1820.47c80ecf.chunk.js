"use strict";(self.webpackChunkcomputing=self.webpackChunkcomputing||[]).push([[1820],{1820:function(n,e,r){r.r(e),r.d(e,{default:function(){return c}});var t=r(2791),i=r(8329),a=r(184),o=(0,t.lazy)((function(){return r.e(6370).then(r.bind(r,6370))})),s=(0,t.lazy)((function(){return r.e(3779).then(r.bind(r,3779))})),d=(0,t.lazy)((function(){return Promise.all([r.e(7160),r.e(6884)]).then(r.bind(r,3397))}));function c(){(0,i.Z)("Js Arrow Function");return(0,a.jsx)(a.Fragment,{children:(0,a.jsxs)("div",{id:"container",children:[(0,a.jsx)("div",{id:"left",children:(0,a.jsx)(o,{})}),(0,a.jsxs)("div",{id:"middle",children:[(0,a.jsx)("h1",{children:"Javascript Arrow Function"}),(0,a.jsx)("p",{children:"Arrow functions are a new feature in ES6. They are a concise way to define functions. They are a little bit different from regular functions in that they do not have a function keyword."}),(0,a.jsx)("h1",{children:"Trdational vs Arrow Function"}),(0,a.jsxs)("p",{children:[" ","Arrow function needs a variable to be defined in order to use it. See below for an example and observe the difference."]}),(0,a.jsx)(d,{props:" //Traditional Function\n  function add() {\n     return 5 + 5;\n}\n    //Arrow Function\n  const add = () => {\n     return 5 + 5;\n}"}),(0,a.jsx)("h1",{children:"Parameters in Arrow Function"}),(0,a.jsx)("p",{children:"Paramenters is a list of variables that are used to define the function. The parameters are separated by commas. The parameters is useful when you want to reuse the data. For example"}),(0,a.jsx)(d,{props:"const add = (a, b) => {\n    return a + b;\n}\nadd(5, 5);"})]}),(0,a.jsx)("div",{id:"right",children:(0,a.jsx)(s,{})})]})})}}}]);
//# sourceMappingURL=1820.47c80ecf.chunk.js.map